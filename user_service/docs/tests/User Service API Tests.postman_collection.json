{
	"info": {
		"_postman_id": "a250ef85-f181-4831-a805-88055d896293",
		"name": "User Service API Tests",
		"description": "This Postman collection contains tests for the User Service API, covering authentication, user registration, and user management endpoints. It includes endpoints for both authenticated user actions and admin-level user management.",
		"version": "1.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44861307",
		"_collection_link": "https://y-6768717.postman.co/workspace/y's-Workspace~2df487b8-ea34-49dc-8752-a3e8bd0d9cfb/collection/44861307-a250ef85-f181-4831-a805-88055d896293?action=share&source=collection_link&creator=44861307"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login (Get Tokens)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"adminpassword\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/token/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"token",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "Endpoints for user authentication to obtain JWT tokens."
		},
		{
			"name": "User Registration",
			"item": [
				{
					"name": "Register New User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newuser123\",\n    \"email\": \"newuser@example.com\",\n    \"password\": \"strongpassword123\",\n    \"password2\": \"strongpassword123\",\n    \"first_name\": \"New\",\n    \"last_name\": \"User\",\n    \"role\": \"user\" // This role is for metadata, not permissions now\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "Endpoint for creating new user accounts."
		},
		{
			"name": "Current User Actions (Authenticated)",
			"item": [
				{
					"name": "Get My Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/me/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update My Profile (Partial)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Updated\",\n    \"last_name\": \"Name\"\n    // Try to change 'is_staff' or 'groups' here as non-superuser, it should fail.\n    // \"is_staff\": true\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/me/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Change My Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"old_password\": \"strongpassword123\",\n    \"new_password\": \"newstrongpassword\",\n    \"new_password2\": \"newstrongpassword\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/change-password/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"change-password",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "Actions for the currently authenticated user."
		},
		{
			"name": "User Management (Admin/Manager/Staff Access)",
			"item": [
				{
					"name": "List All Users (Role-Filtered)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								""
							]
						},
						"description": "Admin sees all. Manager sees Staff/Users. Staff sees Users. User sees only self."
					},
					"response": []
				},
				{
					"name": "Retrieve Specific User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/{{TARGET_USER_ID}}/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{TARGET_USER_ID}}",
								""
							]
						},
						"description": "Permissions:\n- Admin: Any user\n- Manager: Staff or User (not other managers or admins)\n- Staff: User (not other staff, managers, or admins)\n- Owner: Self"
					},
					"response": []
				},
				{
					"name": "Update Specific User (Partial)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Updated\",\n    \"last_name\": \"Via Admin\"\n    // Try to change 'is_staff' or 'groups' here as non-superuser, it should fail.\n    // \"is_staff\": true\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{TARGET_USER_ID}}/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{TARGET_USER_ID}}",
								""
							]
						},
						"description": "Permissions:\n- Admin: Any user (can change all fields except password directly)\n- Manager: Staff or User (can change their non-sensitive fields)\n- Owner: Self (can change non-sensitive fields)\n\nNote: is_staff and group changes are for Superuser only."
					},
					"response": []
				},
				{
					"name": "Deactivate User (Soft Delete)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/{{TARGET_USER_ID}}/deactivate/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{TARGET_USER_ID}}",
								"deactivate",
								""
							]
						},
						"description": "Only Admins (is_superuser=True or is_staff=True depending on DRFIsAdminUser config) can deactivate users. An admin cannot deactivate themselves."
					},
					"response": []
				},
				{
					"name": "Activate User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/{{TARGET_USER_ID}}/activate/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{TARGET_USER_ID}}",
								"activate",
								""
							]
						},
						"description": "Only Admins can activate users."
					},
					"response": []
				},
				{
					"name": "Add User to Group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"group_name\": \"Staff\" // Or 'Managers', 'Users'\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{TARGET_USER_ID}}/add-to-group/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{TARGET_USER_ID}}",
								"add-to-group",
								""
							]
						},
						"description": "Only Admins (superusers) can add users to groups."
					},
					"response": []
				},
				{
					"name": "Remove User from Group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"group_name\": \"Staff\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{TARGET_USER_ID}}/remove-from-group/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{TARGET_USER_ID}}",
								"remove-from-group",
								""
							]
						},
						"description": "Only Admins (superusers) can remove users from groups."
					},
					"response": []
				},
				{
					"name": "Set User Staff Status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_staff\": true // or false\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{TARGET_USER_ID}}/set-staff-status/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{TARGET_USER_ID}}",
								"set-staff-status",
								""
							]
						},
						"description": "Only Admins (superusers) can set is_staff status. Superusers cannot remove their own staff status if it's their primary admin access."
					},
					"response": []
				}
			],
			"description": "Endpoints for managing user accounts, with varying access based on group membership."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Automatically extract ACCESS_TOKEN from login response",
					"var jsonData;",
					"try {",
					"    jsonData = pm.response.json();",
					"} catch (e) {",
					"    console.error(\"Error parsing JSON response:\", e);",
					"}",
					"",
					"if (jsonData && jsonData.access) {",
					"    pm.environment.set(\"ACCESS_TOKEN\", jsonData.access);",
					"    console.log(\"Access Token set: \" + jsonData.access.substring(0, 20) + \"...\");",
					"}",
					"if (jsonData && jsonData.refresh) {",
					"    pm.environment.set(\"REFRESH_TOKEN\", jsonData.refresh);",
					"    console.log(\"Refresh Token set: \" + jsonData.refresh.substring(0, 20) + \"...\");",
					"}",
					"",
					"// You might want to manually set TARGET_USER_ID after listing users or creating one.",
					"// Example: pm.environment.set(\"TARGET_USER_ID\", \"1\");"
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://127.0.0.1:8000/api",
			"type": "string"
		},
		{
			"key": "ACCESS_TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "REFRESH_TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "TARGET_USER_ID",
			"value": "1",
			"type": "string"
		}
	]
}