"""
Django settings for user_core project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-n&bn2rnpdmbe-@a_h*=w5-_6q6g18x(^1@*35@%pq0c$!1lgyd')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG_MODE', 'True').lower() == 'true'

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_spectacular',
    # Local apps
    'user.apps.UserConfig',
]

AUTH_USER_MODEL = 'user.CustomUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'user_core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'user_core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
if os.getenv("USE_POSTGRESQL", "False").lower() == "true":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('USER_POSTGRES_DB', 'user_db'),
            'USER': os.environ.get('USER_POSTGRES_USER', 'user_db_user'),
            'PASSWORD': os.environ.get('USER_POSTGRES_PASSWORD', 'user_db_pass'),
            'HOST': os.environ.get('USER_POSTGRES_HOST', 'user_db'),
            'PORT': os.environ.get('USER_POSTGRES_PORT', '5432'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'User Service API',
    'DESCRIPTION': '''
    This API provides comprehensive user management functionalities for your application.
    It supports user registration, authentication using JWT (JSON Web Tokens),
    and role-based access control (RBAC) to secure various endpoints.

    This API is designed to be robust, secure, and flexible, catering to applications
    requiring structured user hierarchies and permissions.
    ''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True, # Important for security
    'BLACKLIST_AFTER_ROTATION': True,
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {name}: {message}', # Added {name} to see which logger is outputting
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'), # Ensure 'logs' directory exists
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'users.views': { # This matches the name of your logger in views.py
            'handlers': ['console', 'file'],
            'level': 'DEBUG', # Set to DEBUG to see all your debug logs
            'propagate': False,
        },
        'users.models': { # This matches the name of your logger in models.py
            'handlers': ['console', 'file'],
            'level': 'DEBUG', # Set to DEBUG to see all your debug logs
            'propagate': False,
        },
        'users.serializers': { # This matches the name of your logger in serializers.py
            'handlers': ['console', 'file'],
            'level': 'DEBUG', # Set to DEBUG to see all your debug logs
            'propagate': False,
        },
        'users.permissions': { # This matches the name of your logger in permissions.py
            'handlers': ['console', 'file'],
            'level': 'DEBUG', # Set to DEBUG to see all your debug logs
            'propagate': False,
        },
        'users.authentication': { # This matches the name of your logger in authentication.py
            'handlers': ['console', 'file'],
            'level': 'DEBUG', # Set to DEBUG to see all your debug logs
            'propagate': False,
        },
        'users.management.commands': { # This matches the name of your logger in management/commands
            'handlers': ['console', 'file'],
            'level': 'DEBUG', # Set to DEBUG to see all your debug logs
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING', # Default for everything else
    }
}

# Create the logs directory if it doesn't exist
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
